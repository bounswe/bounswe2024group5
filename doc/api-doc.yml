openapi: 3.0.0
info:
  title: Melodify
  description: API for a music-based social media application
  version: 0.1.0
servers:
  - url: 'https://api.yourdomain.com/v1'
    description: Main API server

tags:
  - name: Authentication
    description: Authentication related endpoints
  - name: Posts
    description: Endpoints related to post operations
  - name: Users
    description: User profile and related information

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - surname
                - email
                - username
                - password
              properties:
                name:
                  type: string
                surname:
                  type: string
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
            example:
              name: "John"
              surname: "Doe"
              email: "john_doe@gmail.com"
              username: "john_doe"
              password: "password123"  
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  message:
                    type: string
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "Registration successful"
        '400':
          description: Bad request
        '409':
          description: User already exists
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              username: "john_doe"
              password: "password123"
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  message:
                    type: string
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "Login successful"

  /posts:
    post:
      tags:
        - Posts
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - content
              properties:
                username:
                  type: string
                content:
                  type: string
            example:
              username: "john_doe"
              content: "Check out this new song I discovered!"
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  postId:
                    type: string
                  message:
                    type: string
              example:
                postId: "12345"
        '401':
          description: Unauthorized'
    get:
      tags:
        - Posts
      summary: Get all posts
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: Filter posts by username
      responses:
        '200':
          description: Posts retrieved successfully, the response array may be empty
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    postId:
                      type: string
                    username:
                      type: string
                    content:
                      type: string
                    likes:
                      type: integer
                    comments:
                      type: array
                      items:
                        type: object
                        properties:
                          commentId:
                            type: string
                          username:
                            type: string
                          content:
                            type: string
                          likes:
                            type: integer
              example:
                - postId: "12345"
                  username: "john_doe"
                  content: "Check out this new song I discovered!"
                  likes: 10
                  comments:
                    - commentId: "54321"
                      username: "jane_smith"
                      content: "Great song!"
                    - commentId: "67890"
                      username: "mike_jones"
                      content: "I love this track!"
                - postId: "54321"
                  username: "john_doe"
                  content: "Just posted a new remix!"
                  likes: 5
                  comments:
                    - commentId: "98765"
                      username: "jane_smith"
                      content: "Awesome remix!"
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: Get details of a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  postId:
                    type: string
                  username:
                    type: string
                  content:
                    type: string
                  likes:
                    type: integer
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        commentId:
                          type: string
                        username:
                          type: string
                        content:
                          type: string
                        likes:
                          type: integer
              example:
                postId: "12345"
                username: "john_doe"
                content: "Check out this new song I discovered!"
                likes: 10
                comments:
                  - commentId: "54321"
                    username: "jane_smith"
                    content: "Great song!"
                  - commentId: "67890"
                    username: "mike_jones"
                    content: "I love this track!"
        '404':
          description: Post not found
    delete:
      tags:
        - Posts
      summary: Delete a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Post not found
  /posts/{postId}/like:
    post:
      tags:
        - Posts
      summary: Like a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post liked successfully
        '401':
          description: Unauthorized
        '403':
          description: User has already liked the post
        '404':
          description: Post not found
    delete:
      tags:
        - Posts
      summary: Unlike a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post unliked successfully
        '401':
          description: Unauthorized
        '403':
          description: User has not liked the post
        '404':
          description: Post not found
  /posts/{postId}/comment:
    post:
      tags:
        - Posts
      summary: Comment on a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '201':
          description: Comment added successfully
        '401':
          description: Unauthorized
        '404':
          description: Post not found
  /posts/{postId}/comment/{commentId}:
    delete:
      tags:
        - Posts
      summary: Delete a comment on a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: User is not authorized to delete this comment
        '404':
          description: Post or comment not found
  
  /users/{username}:
    get:
      tags:
        - Users
      summary: Get user profile
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  name:
                    type: string
                  surname:
                    type: string
                  email:
                    type: string
                  bio:
                    type: string
                  followers:
                    type: integer
                  following:
                    type: integer
              example:
                username: "john_doe"
                name: "John"
                surname: "Doe"
                email: "john_doe@gmail.com"
                bio: "Music lover and aspiring artist"
                followers: 100
                following: 50
        '404':
          description: User not found
  /users/{username}/followers:
    get:
      tags:
        - Users
      summary: Get user followers
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Followers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
              example:
                - username: "jane_smith"
                  name: "Jane"
                  surname: "Smith"
                - username: "mike_jones"
                  name: "Mike"
                  surname: "Jones"
        '404':
          description: User not found  
  /users/{username}/following:
    get:
      tags:
        - Users
      summary: Get users followed by a user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Users followed retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
              example:
                - username: "jane_smith"
                  name: "Jane"
                  surname: "Smith"
                - username: "mike_jones"
                  name: "Mike"
                  surname: "Jones"
        '404':
          description: User not found
  /users/follow/{username}:
    post:
      tags:
        - Users
      summary: Follow a user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User followed successfully
        '401':
          description: Unauthorized
        '403':
          description: User is already following this user
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Unfollow a user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User unfollowed successfully
        '401':
          description: Unauthorized
        '403':
          description: User is not following this user
        '404':
          description: User not found
  /search:
    get:
      tags:
        - Search
      summary: returns wikidata results
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
        '401':
          description: Unauthorized