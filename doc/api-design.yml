openapi: 3.0.3
info:
  title: Quizzard API
  description: API documentation for the Quizzard application.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        profile_picture:
          type: string
          format: uri
        english_proficiency:
          type: string
          enum: [a1,a2,b1,b2,c1,c2]
        points:
          type: integer
        created_quizzes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - username
        - name
        - email
        - password
        - english_proficiency
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        english_proficiency:
          type: string
          enum: [a1,a2,b1,b2,c1,c2]
      required:
        - username
        - name
        - email
        - password
        - english_proficiency
    LoginRequest:
      type: object
      properties:
        username_or_email:
          type: string
        password:
          type: string
      required:
        - username_or_email
        - password
    ProfileRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's updated name.
        email:
          type: string
          format: email
          description: The user's updated email address.
        profilePicture:
          type: string
          description: URL of the user's updated profile picture.
      example:
        name: John Doe
        email: johndoe@example.com
        profilePicture: "https://example.com/images/profile.jpg"

    ProfileResponse:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        name:
          type: string
          description: The full name of the user.
        profilePicture:
          type: string
          description: URL of the user's profile picture.
        score:
          type: number
          format: float
          description: The user's total score.
        englishProficiency:
          type: string
          description: The user's English proficiency level, based on their score.
          enum:
            - A1
            - A2
            - B1
            - B2
            - C1
            - C2
        noCreatedQuizzes:
          type: integer
          description: The number of quizzes created by the user.
      example:
        username: johndoe
        email: johndoe@example.com
        name: John Doe
        profilePicture: "https://example.com/images/profile.jpg"
        score: 1500.0
        englishProficiency: B1
        noCreatedQuizzes: 5
    Quiz:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        title:
          type: string
        difficulty:
          type: number
          format: float
        description:
          type: string
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              quizId:
                type: integer
              questionType:
                type: string
                enum: [english_to_turkish, turkish_to_english, english_to_sense]
              word:
                type: string
              correctAnswer:
                type: string
              wrongAnswers:
                type: array
                items:
                  type: string
              difficulty:
                type: number
                format: float
      required:
        - user_id
        - title
        - difficulty
    Question:
      type: object
      properties:
        id:
          type: integer
        quizId:
          type: integer
        questionType:
          type: string
          enum: [english_to_turkish, turkish_to_english, english_to_sense]
        word:
          type: string
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
        difficulty:
          type: number
          format: float
      required:
        - quiz_id
        - question_type
        - word
        - correct_answer
        - difficulty
    ForumPost:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        title:
          type: string
        content:
          type: string
        upvote:
          type: integer
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - username
        - title
        - content
        - tags
    ForumReply:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        username:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - post_id
        - username
        - content
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    QuizAttemptRequest:
      type: object
      properties:
        quizId:
          type: integer
          description: ID of the quiz to attempt.
      required:
        - quizId
    QuizAttemptResponse:
      type: object
      properties:
        id:
          type: integer
          description: Quiz attempt ID.
        userId:
          type: integer
          description: User ID.
        quizId:
          type: integer
          description: Quiz ID.
        score:
          type: integer
          description: Score obtained in the quiz attempt.
        completed:
          type: boolean
          description: Whether the quiz attempt is completed.
        completedAt:
          type: string
          format: date-time
          description: Time when the quiz attempt was completed.
        updatedAt:
          type: string
          format: date-time
          description: Last updated time of the quiz attempt.
    QuestionAnswerRequest:
      type: object
      properties:
        quizAttemptId:
          type: integer
          description: "The ID of the quiz attempt."
        questionId:
          type: integer
          description: "The ID of the question."
        answer:
          type: string
          description: "The user's answer."
      required:
        - quizAttemptId
        - questionId
        - answer
    
    QuestionAnswerResponse:
      type: object
      properties:
        id:
          type: integer
          description: "The ID of the question answer."
        quizAttemptId:
          type: integer
          description: "The ID of the quiz attempt."
        questionId:
          type: integer
          description: "The ID of the question."
        answer:
          type: string
          description: "The user's answer."
        isCorrect:
          type: boolean
          description: "Whether the answer was correct."
        updatedAt:
          type: string
          format: date-time
          description: "The timestamp when the answer was given."
    
    UpdateAnswerRequest:
      type: object
      properties:
        newAnswer:
          type: string
          description: "The new answer to update."
      required:
        - newAnswer
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                profile_picture:
                  type: string
                  format: uri
                english_proficiency:
                  type: string
                  enum: [beginner, intermediate, advanced]
                password:
                  type: string
                new_password:
                  type: string
              # Add other updatable fields as needed
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/me:
    get:
      summary: Get the authenticated user's profile
      tags:
        - Profile
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for user authentication.
          schema:
            type: string
      responses:
        '200':
          description: Profile details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT token.
    put:
      summary: Update the authenticated user's profile
      tags:
        - Profile
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for user authentication.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid input data.
        '401':
          description: Unauthorized - Missing or invalid JWT token.

  /profile/{username}:
    get:
      summary: Get a user's profile by username
      tags:
        - Profile
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user whose profile is being requested.
          schema:
            type: string
      responses:
        '200':
          description: Profile details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '404':
          description: User not found.
  /autocomplete:
    get:
      summary: "Returns word auto complete suggestions"
      description: "It returns a list that contains at most 5 words that start with prefix."
      parameters:
        - name: "prefix"
          in: "query"
          required: true
          schema:
            type: "string"
            example: "ca"
      responses:
        200:
          description: "Successfully returned words."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
                example: [ "car", "care", "carry", "carrier", "cat" ]
        400:
          description: "Geçersiz parametre veya eksik prefix."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                example:
                  error: "Prefix parameter is required"
  /word-checker:
    get:
      summary: Check if a word is valid
      tags:
        - Questions
      security:
        - bearerAuth: []
      parameters:
        - name: word
          in: query
          required: true
          schema:
            type: string
          description: The word to be validated for existence in the database.
        - name: type
          in: query
          required: true
          schema:
            type: string
          description: The type of word check (e.g., language or category).
      responses:
        '200':
          description: Word validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                    description: Whether the word exists in the database.
  /word_suggestions:
    get:
      summary: Get question word suggestions
      tags:
        - Questions
      security:
        - bearerAuth: []
      parameters:
        - name: word
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [english_to_turkish, turkish_to_english, english_to_sense]
      responses:
        '200':
          description: Question word retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: string
                    example: ["fast", "fasten", "faster"]
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /question_answers:
    get:
      summary: Get question answers
      tags:
        - Questions
      security:
        - bearerAuth: []
      parameters:
        - name: word
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [english_to_turkish, turkish_to_english, english_to_sense]
      responses:
        '200':
          description: Question answers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    correctAnswer:
                      type: string
                    wrongAnswers:
                      type: array
                      items:
                        type: string
        '400':
          description: Invalid input
  /quizzes:
    post:
      summary: Create a new quiz
      tags:
        - Quizzes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                image:
                  type: string
                  format: base64
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      questionType:
                        type: string
                        enum: [english_to_turkish, turkish_to_english, english_to_sense]
                      word:
                        type: string
                      correctAnswer:
                        type: string
                      wrongAnswers:
                        type: array
                        items:
                          type: string
              required:
                - title
                - questions
      responses:
        '201':
          description: Quiz created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get list of quizzes
      tags:
        - Quizzes
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
          description: Number of items per page
        - name: filter
          in: query
          schema:
            type: string
            enum: [own, others, all]
          description: Filter quizzes by ownership (own, others, or all)
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [a1,a2,b1,b2,c1,c2]
          description: Filter quizzes by difficulty
      responses:
        '200':
          description: A list of quizzes
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizzes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quiz'
                  total_count:
                    type: integer
                  page:
                    type: integer
                  total_pages:
                    type: integer
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /quizzes/{id}:
    get:
      summary: Get quiz details
      tags:
        - Quizzes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Quiz details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz:
                    $ref: '#/components/schemas/Quiz'
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a quiz
      tags:
        - Quizzes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                image:
                  type: string
                  format: base64
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      questionType:
                        type: string
                        enum: [english_to_turkish, turkish_to_english, english_to_sense]
                      word:
                        type: string
                      correctAnswer:
                        type: string
                      wrongAnswers:
                        type: array
                        items:
                          type: string
      responses:
        '200':
          description: Quiz updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a quiz
      tags:
        - Quizzes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Quiz deleted successfully
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /quizzes/{id}/solve:
    post:
      summary: Solve a quiz
      tags:
        - Quizzes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: integer
                      selected_answer:
                        type: string
              required:
                - answers
      responses:
        '200':
          description: Quiz solved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                  correct_answers:
                    type: integer
                  total_questions:
                    type: integer
                  points_awarded:
                    type: integer
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /quiz-attempts:
    post:
      summary: Attempt a quiz
      description: Creates a new quiz attempt for a user if they don't have an incomplete attemp. Returns the existing one otherwise.
      operationId: addQuizAttempt
      tags:
        - Quiz Attempts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizAttemptRequest'
      responses:
        '201':
          description: Quiz attempt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
    get:
      summary: Get all quiz attempts optionally by quizID and isCompleted fields.
      description: Retrieves all quiz attempts for the authenticated user with optional filters.
      operationId: getAllQuizAttempts
      tags:
        - Quiz Attempts
      parameters:
        - name: isCompleted
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by completion status.
        - name: quizId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by quiz ID.
      responses:
        '200':
          description: List of quiz attempts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizAttemptResponse'
  /quiz-attempts/{id}:
    get:
      summary: Get a quiz attempt by ID
      description: Retrieves a specific quiz attempt by its ID.
      operationId: getQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      responses:
        '200':
          description: Quiz attempt details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
    delete:
      summary: Delete a quiz attempt
      description: Deletes a quiz attempt by its ID.
      operationId: deleteQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      responses:
        '204':
          description: Quiz attempt deleted successfully.
    put:
      summary: Update a quiz attempt
      description: Updates completed field to true if it is false.
      operationId: updateQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  description: Whether the quiz attempt is completed.
      responses:
        '200':
          description: Quiz attempt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
  /question-answers:
    post:
      summary: "Create a new question answer"
      description: "Creates a new answer for a specific question in an incomplete quiz attempt."
      operationId: "createQuestionAnswer"
      tags:
        - "Question Answer"
      parameters:
      requestBody:
        description: "Request body containing the quiz attempt ID, question ID, and the answer."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionAnswerRequest"
      responses:
        '200':
          description: "Successfully created the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '400':
          description: "Invalid input provided"
        '401':
          description: "Unauthorized, invalid or missing JWT token"
        '404':
          description: "Quiz attempt or question not found"
    
    get:
      summary: "Get all question answers"
      description: "Retrieve all question answers for the user, with optional filters for quiz attempt and question."
      operationId: "getAllQuestionAnswers"
      tags:
        - "Question Answer"
      parameters:
        - name: "quizAttemptId"
          in: "query"
          description: "Filter by quiz attempt ID"
          required: false
          schema:
            type: integer
        - name: "questionId"
          in: "query"
          description: "Filter by question ID"
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: "Successfully retrieved the list of question answers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionAnswerResponse"
        '401':
          description: "Unauthorized, invalid or missing JWT token"
  
  /question-answers/{id}:
    get:
      summary: "Get a specific question answer"
      description: "Retrieve a specific question answer by its ID. Only accessible to the user who owns the quiz attempt."
      operationId: "getQuestionAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Successfully retrieved the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to access this answer"
    
    delete:
      summary: "Delete a question answer"
      description: "Delete a specific question answer. Only accessible to the user who owns the quiz attempt."
      operationId: "deleteQuestionAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer to delete"
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Successfully deleted the question answer"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to delete this answer"
  
  /question-answers/{id}/update-answer:
    put:
      summary: "Update an existing question answer"
      description: "Update the answer for a specific question in an incomplete quiz attempt. Only accessible to the user who owns the quiz attempt."
      operationId: "updateAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer to update"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Request body containing the new answer to update."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAnswerRequest"
      responses:
        '200':
          description: "Successfully updated the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '400':
          description: "Invalid input provided"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to update this answer"
  /forum/posts:
    post:
      summary: Create a forum post
      tags:
        - Forum
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                lexvo_link:
                  type: string
                  format: uri
                tags:
                  type: array
                  items:
                    type: string
              required:
                - title
                - content
                - tags
      responses:
        '201':
          description: Forum post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get list of forum posts
      tags:
        - Forum
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        '200':
          description: A list of forum posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPost'
  /forum/posts/{id}:
    get:
      summary: Get forum post details
      tags:
        - Forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Forum post details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: '#/components/schemas/ForumPost'
                  replies:
                    type: array
                    items:
                      $ref: '#/components/schemas/ForumReply'
                  suggestions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ForumPost'
        '404':
          description: Forum post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forum/posts/{id}/replies:
    post:
      summary: Reply to a forum post
      tags:
        - Forum
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: Reply added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumReply'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Forum post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forum/posts/{id}/upvote:
    post:
      summary: Upvote a forum post
      tags:
        - Forum
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post upvoted successfully
        '404':
          description: Forum post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove upvote from a forum post
      tags:
        - Forum
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post downvoted successfully
        '404':
          description: Forum post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /search:
    get:
      summary: Search forum posts
      tags:
        - Search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ForumPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
security:
  - bearerAuth: []
