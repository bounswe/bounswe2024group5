openapi: 3.0.3
info:
  title: Quizzard API
  description: API documentation for the Quizzard application.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        profile_picture:
          type: string
          format: uri
        englishProficiency:
          type: string
          enum: [a1,a2,b1,b2,c1,c2]
        points:
          type: integer
        created_quizzes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - username
        - name
        - email
        - password
        - englishProficiency
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        englishProficiency:
          type: string
          enum: [a1,a2,b1,b2,c1,c2]
      required:
        - username
        - name
        - email
        - password
        - english_proficiency
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username_or_email
        - password
    ProfileRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's updated name.
        email:
          type: string
          format: email
          description: The user's updated email address.
        profilePicture:
          type: string
          description: URL of the user's updated profile picture.
      example:
        name: John Doe
        email: johndoe@example.com
        profilePicture: "https://example.com/images/profile.jpg"

    ProfileResponse:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        name:
          type: string
          description: The full name of the user.
        profilePicture:
          type: string
          description: URL of the user's profile picture.
        score:
          type: number
          format: float
          description: The user's total score.
        englishProficiency:
          type: string
          description: The user's English proficiency level, based on their score.
          enum:
            - A1
            - A2
            - B1
            - B2
            - C1
            - C2
        noCreatedQuizzes:
          type: integer
          description: The number of quizzes created by the user.
        noFollowers:
          type: integer
          description: Number of followers the user has.
        noFollowing:
          type: integer
          description: Number of users the user is following.
      example:
        username: johndoe
        email: johndoe@example.com
        name: John Doe
        profilePicture: "https://example.com/images/profile.jpg"
        score: 1500.0
        englishProficiency: B1
        noCreatedQuizzes: 5
        noFollowers: 25
        noFollowing: 15
    CreateQuizRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionRequest'
    UpdateQuizRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
    QuestionRequest:
      type: object
      properties:
        questionType:
          type: string
          enum: [english_to_turkish, turkish_to_english, english_to_sense]
        word:
          type: string
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
          example: ["answer1", "answer2", "answer3"]  
    QuizResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        image:
          type: string
        difficulty:
          type: number
          format: float
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionResponse'
    QuestionResponse:
      type: object
      properties:
        id:
          type: integer
        quizId:
          type: integer
        questionType:
          type: string
          enum: [english_to_turkish, turkish_to_english, english_to_sense]
        word:
          type: string
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
          example: ["answer1", "answer2", "answer3"]  
        difficulty:
          type: number
          format: float
    Quiz:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        title:
          type: string
        difficulty:
          type: number
          format: float
        description:
          type: string
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              quizId:
                type: integer
              questionType:
                type: string
                enum: [english_to_turkish, turkish_to_english, english_to_sense]
              word:
                type: string
              correctAnswer:
                type: string
              wrongAnswers:
                type: array
                items:
                  type: string
              difficulty:
                type: number
                format: float
      required:
        - user_id
        - title
        - difficulty
    Question:
      type: object
      properties:
        id:
          type: integer
        quizId:
          type: integer
        questionType:
          type: string
          enum: [english_to_turkish, turkish_to_english, english_to_sense]
        word:
          type: string
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
        difficulty:
          type: number
          format: float
      required:
        - quiz_id
        - question_type
        - word
        - correct_answer
        - difficulty
    ForumPost:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        title:
          type: string
        content:
          type: string
        upvote:
          type: integer
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - username
        - title
        - content
        - tags
    ForumReply:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        username:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - post_id
        - username
        - content
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    QuizAttemptRequest:
      type: object
      properties:
        quizId:
          type: integer
          description: ID of the quiz to attempt.
      required:
        - quizId
    QuizAttemptResponse:
      type: object
      properties:
        id:
          type: integer
          description: Quiz attempt ID.
        userId:
          type: integer
          description: User ID.
        quizId:
          type: integer
          description: Quiz ID.
        score:
          type: integer
          description: Score obtained in the quiz attempt.
        completed:
          type: boolean
          description: Whether the quiz attempt is completed.
        completedAt:
          type: string
          format: date-time
          description: Time when the quiz attempt was completed.
        updatedAt:
          type: string
          format: date-time
          description: Last updated time of the quiz attempt.
    QuestionAnswerRequest:
      type: object
      properties:
        quizAttemptId:
          type: integer
          description: "The ID of the quiz attempt."
        questionId:
          type: integer
          description: "The ID of the question."
        answer:
          type: string
          description: "The user's answer."
      required:
        - quizAttemptId
        - questionId
        - answer
    
    QuestionAnswerResponse:
      type: object
      properties:
        id:
          type: integer
          description: "The ID of the question answer."
        quizAttemptId:
          type: integer
          description: "The ID of the quiz attempt."
        questionId:
          type: integer
          description: "The ID of the question."
        answer:
          type: string
          description: "The user's answer."
        isCorrect:
          type: boolean
          description: "Whether the answer was correct."
        updatedAt:
          type: string
          format: date-time
          description: "The timestamp when the answer was given."
    
    UpdateAnswerRequest:
      type: object
      properties:
        newAnswer:
          type: string
          description: "The new answer to update."
      required:
        - newAnswer

    PostRequest:
      type: object
      properties:
        title:
          type: string
          example: "Sample Title"
        content:
          type: string
          example: "This is a sample post content."
        tags:
          type: array
          items:
            type: string
            example: "fast"
    PostResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
            example: "fast"
        noUpvote:
          type: integer
        noReplies:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UpvoteResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the upvote.
        postId:
          type: integer
          description: ID of the post that was upvoted.
        username:
          type: integer
          description: username of the user who upvoted the post.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the upvote was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the upvote was last updated.
    ReplyRequest:
      type: object
      properties:
        content:
          type: string
          description: Content of the reply.
      required:
        - content

    ReplyResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the reply.
        postId:
          type: integer
          description: The ID of the post the reply belongs to.
        username:
          type: string
          description: The name of the user who created the reply.
        content:
          type: string
          description: Content of the reply.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the reply was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the reply was last updated.
    FavoriteQuizRequest:
      type: object
      properties:
        quizId:
          type: integer
          example: 42
    FavoriteQuizResponse:
      type: object
      properties:
        id:
          type: integer
          example: 10
        userId:
          type: integer
          example: 1
        quizId:
          type: integer
          example: 42
        createdAt:
          type: string
          format: date-time
          example: "2024-11-23T12:45:30"
        updatedAt:
          type: string
          format: date-time
          example: "2024-11-23T12:45:30"
    FavoriteQuestionRequest:
      type: object
      properties:
        questionId:
          type: integer
          example: 1
          description: The ID of the question to add to favorites.
      required:
        - questionId

    FavoriteQuestionResponse:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the favorite question.
        questionId:
          type: integer
          description: The ID of the question in favorites.
        userId:
          type: integer
          description: The ID of the user who added the question to favorites.
        createdAt:
          type: string
          format: date-time
          description: When the question was added to favorites.
        updatedAt:
          type: string
          format: date-time
          description: When the favorite question was last updated.
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/me:
    get:
      summary: Get the authenticated user's profile
      tags:
        - Profile
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for user authentication.
          schema:
            type: string
      responses:
        '200':
          description: Profile details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT token.
    put:
      summary: Update the authenticated user's profile
      tags:
        - Profile
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for user authentication.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid input data.
        '401':
          description: Unauthorized - Missing or invalid JWT token.

  /profile/{username}:
    get:
      summary: Get a user's profile by username
      tags:
        - Profile
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user whose profile is being requested.
          schema:
            type: string
      responses:
        '200':
          description: Profile details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '404':
          description: User not found.
  /autocomplete:
    get:
      summary: "Returns word auto complete suggestions"
      description: "It returns a list that contains at most 5 words that start with prefix."
      tags:
        - Word Related
      parameters:
        - name: prefix
          in: "query"
          required: true
          schema:
            type: "string"
            example: "ca"
        - name: language
          in: query
          required: true
          schema:
            type: string
            enum: [english, turkish]
          description: The language of the word to be completed (e.g. english or turkish).
      responses:
        200:
          description: "Successfully returned words."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
                example: [ "car", "care", "carry", "carrier", "cat" ]
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                example:
                  error: "Prefix parameter is required"
  /word-checker:
    get:
      summary: Check if a word is valid
      tags:
        - Word Related
      security:
        - bearerAuth: []
      parameters:
        - name: word
          in: query
          required: true
          schema:
            type: string
          description: The word to be validated for existence in the database.
        - name: language
          in: query
          required: true
          schema:
            type: string
            enum: [english, turkish]
          description: The language of the word to be checked (e.g. english or turkish).
      responses:
        '200':
          description: Word validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                    description: Whether the word exists in the database.
  /answer-suggestion:
    get:
      summary: Get answer suggestions (wrong answer suggestions not implemented yet)
      tags:
        - Word Related
      description: Returns a list of correct and wrong answer suggestions based on the given word and question type.
      parameters:
        - name: word
          in: query
          required: true
          description: The word for which suggestions are needed.
          schema:
            type: string
        - name: questionType
          in: query
          required: true
          description: The type of question (e.g., english_to_sense, english_to_turkish, turkish_to_english).
          schema:
            type: string
            enum:
              - english_to_sense
              - english_to_turkish
              - turkish_to_english
      responses:
        '200':
          description: Successful response with answer suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  correctAnswerSuggestions:
                    type: array
                    items:
                      type: string
                    description: List of correct answer suggestions.
                  wrongAnswerSuggestions:
                    type: array
                    items:
                      type: string
                    description: List of wrong answer suggestions.
                example:
                  correctAnswerSuggestions:
                    - example_correct_1
                    - example_correct_2
                  wrongAnswerSuggestions:
                    - example_wrong_1
                    - example_wrong_2
        '400':
          description: Invalid parameters provided.
  /quizzes:
    get:
      summary: Get all quizzes optionally by filters
      description: Retrieve all quizzes, optionally filtered by author username and difficulty range.
      tags:
        - Quizzes
      parameters:
        - name: username
          in: query
          description: Username of the quiz author
          required: false
          schema:
            type: string
        - name: minDifficulty
          in: query
          description: Minimum difficulty level of quizzes
          required: false
          schema:
            type: integer
        - name: maxDifficulty
          in: query
          description: Maximum difficulty level of quizzes
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of quizzes
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizzes:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuizResponse'
    post:
      summary: Create a quiz
      description: Create a new quiz. Requires authentication.
      tags:
        - Quizzes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuizRequest'
      responses:
        '200':
          description: Created quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'
  /quizzes/{id}:
    get:
      summary: Get a quiz by ID
      description: Retrieve a quiz by its ID.
      tags:
        - Quizzes
      parameters:
        - name: id
          in: path
          description: ID of the quiz
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Quiz details
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz:
                    $ref: '#/components/schemas/QuizResponse'
        '404':
          description: Quiz not found
    put:
      summary: Update a quiz
      description: Update an existing quiz. Requires authentication.
      tags:
        - Quizzes
      parameters:
        - name: id
          in: path
          description: ID of the quiz
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuizRequest'
      responses:
        '200':
          description: Updated quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'
    delete:
      summary: Delete a quiz
      description: Delete a quiz by its ID. Requires authentication.
      tags:
        - Quizzes
      parameters:
        - name: id
          in: path
          description: ID of the quiz
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Quiz deleted
  /quiz-attempts:
    post:
      summary: Attempt a quiz
      description: Creates a new quiz attempt for a user if they don't have an incomplete attemp. Returns the existing one otherwise.
      operationId: addQuizAttempt
      tags:
        - Quiz Attempts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizAttemptRequest'
      responses:
        '201':
          description: Quiz attempt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
    get:
      summary: Get all quiz attempts optionally by quizID and isCompleted fields.
      description: Retrieves all quiz attempts for the authenticated user with optional filters.
      operationId: getAllQuizAttempts
      tags:
        - Quiz Attempts
      parameters:
        - name: isCompleted
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by completion status.
        - name: quizId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by quiz ID.
      responses:
        '200':
          description: List of quiz attempts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizAttemptResponse'
  /quiz-attempts/{id}:
    get:
      summary: Get a quiz attempt by ID
      description: Retrieves a specific quiz attempt by its ID.
      operationId: getQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      responses:
        '200':
          description: Quiz attempt details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
    delete:
      summary: Delete a quiz attempt
      description: Deletes a quiz attempt by its ID.
      operationId: deleteQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      responses:
        '204':
          description: Quiz attempt deleted successfully.
    put:
      summary: Update a quiz attempt
      description: Updates completed field to true if it is false.
      operationId: updateQuizAttempt
      tags:
        - Quiz Attempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Quiz attempt ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  description: Whether the quiz attempt is completed.
      responses:
        '200':
          description: Quiz attempt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizAttemptResponse'
  /question-answers:
    post:
      summary: "Create a new question answer"
      description: "Creates a new answer for a specific question in an incomplete quiz attempt."
      operationId: "createQuestionAnswer"
      tags:
        - "Question Answer"
      requestBody:
        description: "Request body containing the quiz attempt ID, question ID, and the answer."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionAnswerRequest"
      responses:
        '200':
          description: "Successfully created the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '400':
          description: "Invalid input provided"
        '401':
          description: "Unauthorized, invalid or missing JWT token"
        '404':
          description: "Quiz attempt or question not found"

    get:
      summary: "Get all question answers"
      description: "Retrieve all question answers for the user, with optional filters for quiz attempt and question."
      operationId: "getAllQuestionAnswers"
      tags:
        - "Question Answer"
      parameters:
        - name: "quizAttemptId"
          in: "query"
          description: "Filter by quiz attempt ID"
          required: false
          schema:
            type: integer
        - name: "questionId"
          in: "query"
          description: "Filter by question ID"
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: "Successfully retrieved the list of question answers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionAnswerResponse"
        '401':
          description: "Unauthorized, invalid or missing JWT token"

  /question-answers/{id}:
    get:
      summary: "Get a specific question answer"
      description: "Retrieve a specific question answer by its ID. Only accessible to the user who owns the quiz attempt."
      operationId: "getQuestionAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Successfully retrieved the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to access this answer"

    delete:
      summary: "Delete a question answer"
      description: "Delete a specific question answer. Only accessible to the user who owns the quiz attempt."
      operationId: "deleteQuestionAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer to delete"
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Successfully deleted the question answer"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to delete this answer"

  /question-answers/{id}/update-answer:
    put:
      summary: "Update an existing question answer"
      description: "Update the answer for a specific question in an incomplete quiz attempt. Only accessible to the user who owns the quiz attempt."
      operationId: "updateAnswer"
      tags:
        - "Question Answer"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the question answer to update"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Request body containing the new answer to update."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAnswerRequest"
      responses:
        '200':
          description: "Successfully updated the question answer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerResponse"
        '400':
          description: "Invalid input provided"
        '404':
          description: "Question answer not found"
        '403':
          description: "Forbidden, user is not authorized to update this answer"
  /posts:
    post:
      summary: Create a new post
      tags:
        - Forum Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized access (invalid or missing JWT token).
        '400':
          description: Title, content and word are required
    get:
      summary: Get all posts optionally by username and tag
      tags:
        - Forum Posts
      parameters:
        - name: tag
          in: query
          required: false
          description: Filter posts by a specific tag.
          schema:
            type: string
        - name: username
          in: query
          required: false
          description: Filter posts by a specific username.
          schema:
            type: string
      responses:
        '200':
          description: A list of posts matching the filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'

  /posts/{postId}:
    get:
      summary: Get a post by ID
      tags:
        - Forum Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Post details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: Post not found.

    put:
      summary: Update a post by ID
      tags:
        - Forum Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: Post updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '403':
          description: Access denied (user is not the owner of the post).
        '404':
          description: Post not found.

    delete:
      summary: Delete a post by ID
      tags:
        - Forum Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted successfully.
        '403':
          description: Access denied (user is not the owner of the post).
        '404':
          description: Post not found.
  /posts/{postId}/upvote:
    post:
      summary: Upvote a post
      tags:
        - Forum Post Upvotes
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to upvote.
          schema:
            type: integer
      responses:
        '200':
          description: Upvote successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpvoteResponse'
        '400':
          description: Bad request (e.g., post not found, already upvoted).
        '401':
          description: Unauthorized access (invalid or missing JWT token).
    delete:
      summary: Remove an upvote from a post
      tags:
        - Forum Post Upvotes
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to remove upvote from.
          schema:
            type: integer
      responses:
        '204':
          description: Upvote successfully removed.
        '400':
          description: Bad request (e.g., upvote not found).
        '401':
          description: Unauthorized access (invalid or missing JWT token).

  /posts/{postId}/upvotes:
    get:
      summary: Get all upvotes for a post optionally by username
      tags:
        - Forum Post Upvotes
      parameters:
        - name: postId
          in: path
          required: true
          description: The id of the post to retrieve upvotes for.
          schema:
            type: integer
        - name: username
          in: query
          required: false
          description: Filter upvotes by a specific user.
          schema:
            type: string
      responses:
        '200':
          description: A list of upvotes for the post.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpvoteResponse'

  /posts/upvotes:
    get:
      summary: Get all upvotes optionally by username and postId
      tags:
        - Forum Post Upvotes
      parameters:
        - name: username
          in: query
          required: false
          description: Filter upvotes by a specific user.
          schema:
            type: string
        - name: postId
          in: query
          required: false
          description: Filter upvotes by a specific post.
          schema:
            type: integer
      responses:
        '200':
          description: A list of upvotes matching the filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpvoteResponse'
  /posts/upvotes/{upvoteId}:
    get:
      summary: Get a specific upvote by ID
      tags:
        - Forum Post Upvotes
      parameters:
        - name: upvoteId
          in: path
          required: true
          description: The ID of the upvote to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Upvote details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpvoteResponse'
        '404':
          description: Upvote not found.
  /posts/{postId}/replies:
    post:
      summary: Create a reply to a specific post
      tags:
        - Forum Post Replies
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to which the reply belongs.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyRequest'
      responses:
        '201':
          description: Reply created successfully.
          headers:
            Location:
              description: URI of the created reply.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyResponse'
        '400':
          description: Invalid request (e.g., missing or empty content).
        '401':
          description: Unauthorized access (invalid or missing JWT token).
        '404':
          description: Post not found.

    get:
      summary: Get all replies for a specific post
      tags:
        - Forum Post Replies
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post for which replies are retrieved.
          schema:
            type: integer
      responses:
        '200':
          description: A list of replies for the specified post.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyResponse'
        '404':
          description: Post not found.

  /posts/replies:
    get:
      summary: Get replies optionally by username
      tags:
        - Forum Post Replies
      parameters:
        - name: username
          in: query
          required: false
          description: The username of the user whose replies are retrieved. If not provided, retrieves all replies.
          schema:
            type: string
      responses:
        '200':
          description: A list of replies by the specified user or all replies if no user ID is provided.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyResponse'

  /posts/replies/{replyId}:
    get:
      summary: Get a specific reply by ID
      tags:
        - Forum Post Replies
      parameters:
        - name: replyId
          in: path
          required: true
          description: The ID of the reply to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Reply details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyResponse'
        '404':
          description: Reply not found.

    put:
      summary: Update a specific reply by ID
      tags:
        - Forum Post Replies
      parameters:
        - name: replyId
          in: path
          required: true
          description: The ID of the reply to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyRequest'
      responses:
        '200':
          description: Reply updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyResponse'
        '400':
          description: Invalid request (e.g., missing or empty content).
        '403':
          description: Access denied (user is not authorized to update the reply).
        '404':
          description: Reply not found.

    delete:
      summary: Delete a specific reply by ID
      tags:
        - Forum Post Replies
      parameters:
        - name: replyId
          in: path
          required: true
          description: The ID of the reply to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Reply deleted successfully.
        '403':
          description: Access denied (user is not authorized to delete the reply).
        '404':
          description: Reply not found.
  /posts/search:
    get:
      summary: Search forum posts
      tags:
        - Forum Post Search
      parameters:
        - name: keyword
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
          description: Page number (0-indexed)
        - name: size
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /posts/{postId}/related:
    get:
      summary: Get related posts of a specific post
      tags:
        - Forum Post Search
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to retrieve related posts for.
        - name: page
          in: query
          schema:
            type: integer
          description: Page number (0-indexed)
        - name: size
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /file/upload:
    post:
      tags:
        - File
      summary: Upload a file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
  /favorite-quiz:
    get:
      summary: Get all favorite quizzes.
      description: Returns a list of all favorite quizzes for the authenticated user.
      tags:
        - Favorite Quizzes
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer <jwt_token>
          description: JWT token for authentication.
      responses:
        '200':
          description: List of favorite quizzes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteQuizResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT token.
    post:
      summary: Add a quiz to the user's favorites.
      description: Adds a quiz to the user's favorite list. Requires an Authorization header with a valid JWT token.
      tags:
        - Favorite Quizzes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteQuizRequest'
      responses:
        '201':
          description: Quiz added to favorites successfully.
          headers:
            Location:
              description: URI of the created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteQuizResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT token.
  /favorite-quiz/{id}:
    get:
      summary: Get a favorite quiz.
      description: Returns a favorite quiz by its ID. Requires an Authorization header with a valid JWT token.
      tags:
        - Favorite Quizzes
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer <jwt_token>
          description: JWT token for authentication.
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: ID of the favorite quiz to retrieve.
      responses:
        '200':
          description: The favorite quiz with the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteQuizResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT token.
        '404':
          description: Not Found - Favorite quiz with the given ID not found.
    delete:
      summary: Delete a favorite quiz.
      description: Deletes a favorite quiz by its ID. Requires an Authorization header with a valid JWT token.
      tags:
        - Favorite Quizzes
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer <jwt_token>
          description: JWT token for authentication.
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: ID of the favorite quiz to delete.
      responses:
        '204':
          description: No content - Favorite quiz deleted successfully.
        '401':
          description: Unauthorized - Missing or invalid JWT token.
        '404':
          description: Not Found - Favorite quiz with the given ID not found.
  /favorite-question:
    post:
      summary: Add a question to favorites
      description: Adds a question to the user's favorites.
      tags:
        - Favorite Questions
      operationId: addFavoriteQuestion
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Bearer token for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteQuestionRequest"
      responses:
        201:
          description: Successfully added the question to favorites.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteQuestionResponse"
        400:
          description: The question is already in favorites.
        404:
          description: Question not found.
    get:
      summary: Get all favorite questions
      description: Retrieves all questions the user has added to favorites.
      tags:
        - Favorite Questions
      operationId: getAllFavoriteQuestions
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Bearer token for authentication.
      responses:
        200:
          description: Successfully retrieved favorite questions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FavoriteQuestionResponse"

  /favorite-question/{id}:
    get:
      summary: Get a specific favorite question
      description: Retrieves a specific favorite question by ID.
      tags:
        - Favorite Questions
      operationId: getFavoriteQuestion
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Bearer token for authentication.
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the favorite question to retrieve.
      responses:
        200:
          description: Successfully retrieved the favorite question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteQuestionResponse"
        404:
          description: Favorite question not found.

    delete:
      summary: Remove a question from favorites
      description: Deletes a question from the user's favorites by ID.
      tags:
        - Favorite Questions
      operationId: deleteFavoriteQuestion
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Bearer token for authentication.
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the favorite question to delete.
      responses:
        204:
          description: Successfully deleted the favorite question.
        404:
          description: Favorite question not found.
  /profile/follow/{followingUsername}:
    post:
      summary: Follow a user
      description: Allows the authenticated user to follow another user.
      tags:
        - Follow
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer JWT token for authentication.
        - name: followingUsername
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to follow.
      responses:
        '200':
          description: Successfully followed the user.
          content:
            text/plain:
              schema:
                type: string
              example: Followed user
        '400':
          description: Invalid request.
        '404':
          description: User not found.
    delete:
      summary: Unfollow a user
      description: Allows the authenticated user to unfollow another user.
      tags:
        - Follow
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer JWT token for authentication.
        - name: followingUsername
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to unfollow.
      responses:
        '200':
          description: Successfully unfollowed the user.
          content:
            text/plain:
              schema:
                type: string
              example: Unfollowed user
        '400':
          description: Invalid request.
        '404':
          description: User not found.

  /profile/{username}/followers:
    get:
      summary: Get followers of a user
      description: Retrieves a list of followers for a specified user.
      tags:
        - Follow
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user whose followers are being retrieved.
      responses:
        '200':
          description: List of followers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileResponse'
        '404':
          description: User not found.

  /profile/{username}/following:
    get:
      summary: Get users a user is following
      description: Retrieves a list of users that a specified user is following.
      tags:
        - Follow
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user whose following list is being retrieved.
      responses:
        '200':
          description: List of followings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileResponse'
        '404':
          description: User not found.
security:
  - bearerAuth: []